services:
  # ====== The POSTGRESQL Database Service ======
  # PostgreSQL Master
  postgres-master:
    image: postgres:16
    container_name: postgres-master
    environment:
      # read from the .env file
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      POSTGRES_DB: ${PG_DB}
    volumes:
      - ./init/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./postgresql.conf:/etc/postgresql/postgresql.conf
      - ./pg_hba.conf:/etc/postgresql/pg_hba.conf # for allowing replication connections
    command:
      [
        "postgres",
        "-c", "config_file=/etc/postgresql/postgresql.conf",
        "-c", "hba_file=/etc/postgresql/pg_hba.conf"
      ]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PG_USER} -d ${PG_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - storage_network

  # PostgreSQL Slave 1
  postgres-slave-1:
    image: postgres:16
    container_name: postgres-slave-1
    environment:
      # read from the .env file
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      POSTGRES_DB: ${PG_DB}
    volumes:
      - ./postgresql.conf:/etc/postgresql/postgresql.conf
      - ./pg_hba.conf:/etc/postgresql/pg_hba.conf
      - ./slave1_data:/var/lib/postgresql/data
      - ./setup-slave.sh:/setup-slave.sh
    depends_on:
      postgres-master:
        condition: service_healthy
    command: [ "bash", "-c", "./setup-slave.sh" ]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PG_USER} -d ${PG_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - storage_network

  # PostgreSQL Slave 2
  postgres-slave-2:
    image: postgres:16
    container_name: postgres-slave-2
    ports:
      - "5434:5432"
    environment:
      # read from the .env file
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      POSTGRES_DB: ${PG_DB}
    volumes:
      - ./postgresql.conf:/etc/postgresql/postgresql.conf
      - ./pg_hba.conf:/etc/postgresql/pg_hba.conf
      - ./slave2_data:/var/lib/postgresql/data
      - ./setup-slave.sh:/setup-slave.sh
    depends_on:
      postgres-master:
        condition: service_healthy
    command: [ "bash", "-c", "./setup-slave.sh" ]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PG_USER} -d ${PG_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - storage_network


  # ====== The APP Service ======
  # app-1
  app-1:
    build: .
    stdin_open: true   # equivalent of -i
    tty: true          # equivalent of -t
    container_name: app-1
    environment:
      MASTER_DB_HOST: postgres-master
      SLAVE_DB_HOST: postgres-slave-1
      DB_NAME: ${PG_DB}
      DB_USER: ${PG_USER}
      DB_PASSWORD: ${PG_PASSWORD}
    depends_on:
      postgres-master:
        condition: service_healthy
      postgres-slave-1:
        condition: service_healthy
    networks:
      - storage_network

  # app-2
  app-2:
    build: .
    stdin_open: true   # equivalent of -i
    tty: true          # equivalent of -t
    container_name: app-2
    environment:
      MASTER_DB_HOST: postgres-master
      SLAVE_DB_HOST: postgres-slave-2
      DB_NAME: ${PG_DB}
      DB_USER: ${PG_USER}
      DB_PASSWORD: ${PG_PASSWORD}
    depends_on:
      postgres-master:
        condition: service_healthy
      postgres-slave-2:
        condition: service_healthy
    networks:
      - storage_network
      
  # app-3
  app-3:
    build: .
    stdin_open: true   # equivalent of -i
    tty: true          # equivalent of -t
    container_name: app-3
    environment:
      MASTER_DB_HOST: postgres-master
      SLAVE_DB_HOST: postgres-slave-1
      DB_NAME: ${PG_DB}
      DB_USER: ${PG_USER}
      DB_PASSWORD: ${PG_PASSWORD}
    depends_on:
      postgres-master:
        condition: service_healthy
      postgres-slave-1:
        condition: service_healthy
    networks:
      - storage_network

# network so that the containers can communicate with each other.
networks:
  storage_network:
    driver: bridge

volumes:
  postgres-master-data:
    driver: local
  postgres-slave-1-data:
    driver: local
  postgres-slave-2-data:
    driver: local